{"version":3,"sources":["components/MemoryCard/MemoryCard.js","components/Wrapper/Wrapper.js","components/Jumbotron/index.js","components/Header/index.js","components/GameContainer/index.js","components/NavBar/index.js","components/About/index.js","App.js","index.js"],"names":["MemoryCard","props","className","alt","name","src","image","onClick","handleClick","id","Wrapper","children","Jumbotron","Header","highScore","score","GameContainer","state","chosenCards","clickItems","clickitems","flipItems","setState","reverse","randomizeItems","i","length","j","Math","floor","random","temp","checkValue","console","log","handleSubmit","val","includes","push","endGame","alert","this","map","memCard","Component","Navbar","to","window","location","pathname","About","href","App","NavBar","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"4gFAqBeA,MAlBf,SAAoBC,GAChB,OAEQ,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aAAaC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,S,cCAvGC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCG1BC,MAJf,SAAmBX,GACjB,OAAO,yBAAKC,UAAU,aAAaD,EAAMU,W,MCkB5BE,MAlBf,SAAgBZ,GACZ,OACI,yBAAKC,UAAU,UAIf,2CACA,2CAAiBD,EAAMa,WACvB,sCAAYb,EAAMc,SCyJXC,G,iNA1JbC,MAAQ,CACNF,MAAO,EACPD,UAAW,EACXI,YAAa,GACbC,WAAYC,G,EASdC,UAAY,WACV,EAAKC,SAAS,CACZH,WAAYC,EAAWG,a,EAM3BC,eAAiB,WAKf,IAAK,IAAIC,EAAI,EAAKR,MAAME,WAAWO,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzD,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAO,EAAKd,MAAME,WAAWM,GACjC,EAAKR,MAAME,WAAWM,GAAK,EAAKR,MAAME,WAAWQ,GACjD,EAAKV,MAAME,WAAWQ,GAAKI,I,EAS/BC,WAAa,SAACvB,GAEZwB,QAAQC,IAAIzB,GACZ,EAAK0B,aAAa1B,I,EAIpB0B,aAAe,SAACC,IAQC,IANC,EAAKnB,MAAMC,YAIJmB,SAASD,IAG9B,EAAKnB,MAAMC,YAAYoB,KAAKF,GAC5B,EAAKd,SAAS,CACZP,MAAO,EAAKE,MAAMF,MAAQ,IAE5B,EAAKS,kBAEL,EAAKe,W,EAQTA,QAAU,WACRC,MAAM,iBAEF,EAAKvB,MAAMF,MAAQ,EAAKE,MAAMH,WAChC,EAAKQ,SAAS,CACZR,UAAW,EAAKG,MAAMF,QAI1B,EAAKO,SAAS,CACZJ,YAAa,GACbH,MAAO,IAGT,EAAKS,kB,qHAGG,IAAD,OACP,OACE,yBAAKtB,UAAU,IACb,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAQa,MAAO0B,KAAKxB,MAAMF,MAAOD,UAAW2B,KAAKxB,MAAMH,aAEvD,kBAAC,EAAD,KACA,yBAAKZ,UAAU,OACZuC,KAAKxB,MAAME,WAAWuB,KAAI,SAAAC,GAAO,OAChC,kBAAC,EAAD,CACAvC,KAAMuC,EAAQvC,KACdE,MAAOqC,EAAQrC,MACfG,GAAIkC,EAAQlC,GACZD,YAAa,EAAKwB,uB,GApGFY,c,aCqCbC,MA1Cf,WACE,OACE,yBAAK3C,UAAU,iDACb,kBAAC,IAAD,CAAMA,UAAU,eAAe4C,GAAG,KAAlC,eAGA,6BACE,wBAAI5C,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CACE4C,GAAG,oCACH5C,UAC+B,MAA7B6C,OAAOC,SAASC,UAAiD,WAA7BF,OAAOC,SAASC,SAChD,kBACA,YALR,UAWF,wBAAI/C,UAAU,YACZ,kBAAC,IAAD,CACE4C,GAAG,yCACH5C,UAAwC,cAA7B6C,OAAOC,SAASC,SAA2B,kBAAoB,YAF5E,kB,MCiBGC,MApCf,WAEI,OACE,yBAAKhD,UAAU,IACb,kBAAC,EAAD,KAEA,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeG,IAAI,8DAA8DF,IAAI,eACpG,yBAAKD,UAAU,aACX,wBAAIA,UAAU,cAAd,SACA,uBAAGA,UAAU,aACT,4BACI,yFAGA,oGAGA,kJAGA,6GAIJ,6BACA,0CACA,uBAAGiD,KAAK,yCAAyCjD,UAAU,2BAA3D,mB,OCfLkD,MAZf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAD,MACE,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAK,eAAeC,UAAWN,IAC7C,kBAAC,IAAD,CAAQI,OAAK,EAACC,KAAK,oBAAoBC,UAAWxC,OCT5DyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.02491ba5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction MemoryCard(props) {\n    return (\n        // <div className=\"card col-3\">\n            <div className=\"card\">\n                <img className=\"card-image\" alt={props.name} src={props.image} onClick={() => props.handleClick(props.id)}/>\n            </div>\n            // <div className=\"content\">\n            //     {/* <ul>\n            //         <strong>Number:</strong> {props.name}\n            //     </ul> */}\n            //     <ul>\n            //         <button >Click</button>\n            //     </ul>\n            // </div>\n        // </div>\n    );\n}\n\nexport default MemoryCard;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Jumbotron(props) {\n  return <div className=\"jumbotron\">{props.children}</div>;\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Header(props) {\n    return(\n        <div className=\"header\">\n            \n\n\n        <h1>Memory Game</h1>\n        <h2>High Score: {props.highScore}</h2>\n        <h3>Score: {props.score}</h3>\n        </div>\n    )\n\n}\n\n// <h1>Memory Game</h1>\n//         <h2>High Score: {this.state.highScore}</h2>\n//         <h3>Score: {this.state.score}</h3>\n\nexport default Header;","import React, { Component } from 'react';\nimport MemoryCard from \"../MemoryCard/MemoryCard\"\nimport clickitems from \"../../clickitems.json\"\nimport Wrapper from \"../Wrapper/Wrapper\"\nimport Jumbotron from \"../Jumbotron\"\nimport Header from \"../Header\"\nimport \"./style.css\"\n\n\n\nclass GameContainer extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    chosenCards: [],\n    clickItems: clickitems\n  }\n\n  //Presents state for development purposes\n  componentDidMount() {\n    // console.log(this.state);\n    // this.randomizeItems()\n  }\n\n  flipItems = () => {\n    this.setState({\n      clickItems: clickitems.reverse()\n    })\n    // console.log(this.state.clickItems)\n  }\n\n  //This will randomize the items in the array and re-send to the user for another guess\n  randomizeItems = () => {\n\n    // var currentArray = this.state.clickItems;\n    // console.log(\"pre-randomize: \" + JSON.stringify(this.state.clickItems[0].id))\n\n    for (var i = this.state.clickItems.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = this.state.clickItems[i];\n      this.state.clickItems[i] = this.state.clickItems[j];\n      this.state.clickItems[j] = temp;\n    }\n\n    // console.log(\"post-randomize: \" + JSON.stringify(this.state.clickItems[0].id));\n    // console.log(this.state.clickItems)\n\n  }\n\n  //This handles the users guess and passes it into the handleSubmit function\n  checkValue = (id) => {\n    // const value = event.target.value;\n    console.log(id)\n    this.handleSubmit(id);\n  }\n\n  //This is where the app checks if the user's guess exists in the user's current guess array\n  handleSubmit = (val) => {\n\n    var cardArray = this.state.chosenCards\n    // var validateNum = cardArray.length;\n    // var checked = \"false\"\n\n    var exists = cardArray.includes(val);\n    // console.log(exists);\n    if (exists === false) {\n      this.state.chosenCards.push(val)\n      this.setState({\n        score: this.state.score + 1\n      })\n      this.randomizeItems()\n    } else {\n      this.endGame()\n    }\n\n    // console.log(this.state.chosenCards);\n  }\n\n\n  //This handles the results after the game has been lost. It also resets the state and randomizes the images again\n  endGame = () => {\n    alert(\"Game is over!\");\n\n    if (this.state.score > this.state.highScore) {\n      this.setState({\n        highScore: this.state.score\n      })\n    }\n\n    this.setState({\n      chosenCards: [],\n      score: 0\n    })\n\n    this.randomizeItems()\n  }\n\n  render() {\n    return (\n      <div className=\"\"> \n        <Jumbotron>\n        <Header score={this.state.score} highScore={this.state.highScore}/>\n        </Jumbotron>\n        <Wrapper>\n        <div className=\"row\">\n          {this.state.clickItems.map(memCard => (\n            <MemoryCard \n            name={memCard.name}\n            image={memCard.image}\n            id={memCard.id}\n            handleClick={this.checkValue}\n            />\n          ))}\n          \n{/*           \n          <MemoryCard\n            name={this.state.clickItems[0].name}\n            image={this.state.clickItems[0].image}\n            id={this.state.clickItems[0].id}\n            handleClick={this.checkValue}\n          // value = {id}\n          />\n          <MemoryCard\n            name={this.state.clickItems[1].name}\n            image={this.state.clickItems[1].image}\n            id={this.state.clickItems[1].id}\n            handleClick={this.checkValue}\n          // value = {id}\n\n          />\n          <MemoryCard\n            name={this.state.clickItems[2].name}\n            image={this.state.clickItems[2].image}\n            id={this.state.clickItems[2].id}\n            handleClick={this.checkValue}\n          // value = {id}\n          />\n          <MemoryCard\n            name={this.state.clickItems[3].name}\n            image={this.state.clickItems[3].image}\n            id={this.state.clickItems[3].id}\n            handleClick={this.checkValue}\n          // value = {id}\n          />\n          <MemoryCard\n            name={this.state.clickItems[4].name}\n            image={this.state.clickItems[4].image}\n            id={this.state.clickItems[4].id}\n            handleClick={this.checkValue}\n          // value = {id}\n          />\n          <MemoryCard\n            name={this.state.clickItems[5].name}\n            image={this.state.clickItems[5].image}\n            id={this.state.clickItems[5].id}\n            handleClick={this.checkValue}\n          // value={id}\n          /> */}\n        </div>\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default GameContainer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Memory Game\n      </Link>\n      <div>\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link\n              to=\"evanjcleary.github.io/MemoryReact\"\n              className={\n                window.location.pathname === \"/\" || window.location.pathname === \"/about\"\n                  ? \"nav-link active\"\n                  : \"nav-link\"\n              }\n            >\n              Rules\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link\n              to=\"evanjcleary.github.io/MemoryReact/play\"\n              className={window.location.pathname === \"/discover\" ? \"nav-link active\" : \"nav-link\"}\n            >\n              Play Game\n            </Link>\n          </li>\n          {/* <li className=\"nav-item\">\n            <Link\n              to=\"/search\"\n              className={window.location.pathname === \"/search\" ? \"nav-link active\" : \"nav-link\"}\n            >\n              Search\n            </Link>\n          </li> */}\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Wrapper from \"../Wrapper/Wrapper\"\nimport Jumbotron from \"../Jumbotron\"\nimport \"./style.css\"\n\n\n\nfunction About() {\n\n    return (\n      <div className=\"\"> \n        <Wrapper>\n        \n        <div className=\"card\">\n            <img className=\"card-img-top\" src=\"https://vitbits.in/views/main/image/contest/memory-game.png\" alt=\"RulesImage\"/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Rules</h5>\n                <p className=\"card-text\">\n                    <ul>\n                        <li>\n                            Rule #1: There are 12 cards of different character images\n                        </li>\n                        <li>\n                            Rule #2: You may pick any card to start, but remember who you picked\n                        </li>\n                        <li>\n                            Rule #3: The cards will shuffle and you will pick a different card. Every unique card you choose earns you a point\n                        </li>\n                        <li>\n                            Rule #4: This is repeated until you pick a card twice, and the game will end\n                        </li>\n                    </ul>\n                    <hr/>\n                    <h5>Good Luck!</h5>\n                    <a href=\"evanjcleary.github.io/MemoryReact/play\" className=\"btn btn-outline-primary\">Play Game</a>\n                </p>\n            </div>\n        </div>\n        </Wrapper>\n      </div>\n    )\n}\n\nexport default About;\n","import React from 'react';\nimport GameContainer from \"./components/GameContainer\"\nimport NavBar from \"./components/NavBar\"\nimport About from \"./components/About\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n          <Route  exact path=\"/MemoryReact\" component={About} />\n          <Route  exact path=\"/MemoryReact/play\" component={GameContainer} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}